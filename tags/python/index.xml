<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>python on Yusuf&#39;s Webpage</title>
    <link>https://unchaineddev.github.io/tags/python/</link>
    <description>Recent content in python on Yusuf&#39;s Webpage</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 16 Dec 2023 20:00:39 +0530</lastBuildDate><atom:link href="https://unchaineddev.github.io/tags/python/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Django Project Structure</title>
      <link>https://unchaineddev.github.io/blog/django-structure/</link>
      <pubDate>Sat, 16 Dec 2023 20:00:39 +0530</pubDate>
      
      <guid>https://unchaineddev.github.io/blog/django-structure/</guid>
      <description>I love the Python Programming Language, and its most popular Web Framework - Django. In fact I love it so much that it is reflected in my pseudonym. I am no expert django dev, however I understand the design. this blog post unravels the intricacies of Django&amp;rsquo;s structural design.
Design Django follows a Model-View-Template (MVT) architectural design pattern.
Model: Defines the data structure of the application. Models are used to interact with the database.</description>
    </item>
    
    <item>
      <title>Json Dump(s) vs Load(s)</title>
      <link>https://unchaineddev.github.io/blog/json-dumps-vs-loads/</link>
      <pubDate>Fri, 17 Nov 2023 20:00:52 +0530</pubDate>
      
      <guid>https://unchaineddev.github.io/blog/json-dumps-vs-loads/</guid>
      <description>Do you often google the difference between json.dump(s) and json.loads(s) while working with json data in Python?
Well then, this will be your quick guide to distinguish these functions.
Quite literally, json.load() and json.loads() loads json into your program, while json.dump() and json.dumps() dump data in JSON. Why the extra &amp;ldquo;s&amp;rdquo; though ? That&amp;rsquo;s because json.dumps() and json.loads() deal with JSON data in the form of a string. Remember: s for string</description>
    </item>
    
    <item>
      <title>setting up proxies in selenium</title>
      <link>https://unchaineddev.github.io/blog/proxy-auth/</link>
      <pubDate>Mon, 11 Sep 2023 20:32:32 +0530</pubDate>
      
      <guid>https://unchaineddev.github.io/blog/proxy-auth/</guid>
      <description>this is a sample configuration of using proxies with IP authentication, using selenium and python.
sample code CHROMEDRIVER_PATH = /path/to/chromedriver PROXY = &amp;#34;23.23.23.23:3128&amp;#34; # IP:PORT URL = &amp;#39;https://example.com&amp;#39; from seleniumwire import webdriver from selenium.webdriver.chrome.options import Options from selenium.webdriver.chrome.service import Service options = Options() options.add_argument(&amp;#39;--proxy-server=%s&amp;#39; % PROXY) s = Service(CHROMEDRIVER_PATH) driver = webdriver.Chrome(service=s, options=options) driver.get(URL) what if the connection is insecure? install this certificate
or get the certificate using: python -m seleniumwire extractcert after the certificate is installed,</description>
    </item>
    
    <item>
      <title>solving captchas</title>
      <link>https://unchaineddev.github.io/blog/solving-captchas/</link>
      <pubDate>Sun, 10 Sep 2023 09:42:30 +0530</pubDate>
      
      <guid>https://unchaineddev.github.io/blog/solving-captchas/</guid>
      <description>solving captcha programatically is a pain in the ass. me and this other dude at work took about two weeks to solve version 2 of google recaptcha which we learned later, was an enterprise versioned captcha. i did not understand what that meant, until i read between the lines of the docs.
this blog is a simple sidenote on how to solve recaptcha (v2) with 2captcha API. you can read the docs1, which btw, is amazing.</description>
    </item>
    
  </channel>
</rss>
